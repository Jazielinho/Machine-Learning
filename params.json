{"name":"Prediction Model Assignment Write-up","tagline":"Machine Learning","body":"## Background\r\n\r\nUsing devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement - a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset).\r\n\r\n## Download data:\r\n\r\nLoad packages:\r\n\r\n\r\n```r\r\nlibrary(caret)\r\n```\r\n\r\n```\r\n## \r\n## Attaching package: 'caret'\r\n## \r\n## The following object is masked from 'package:survival':\r\n## \r\n##     cluster\r\n```\r\n\r\nDownload data:\r\n\r\n\r\n```r\r\nif (!file.exists(\"pml-training.csv\")) {\r\n    download.file(\"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\", \r\n                  destfile = \"pml-training.csv\")\r\n}\r\nif (!file.exists(\"pml-testing.csv\")) {\r\n    download.file(\"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\", \r\n                  destfile = \"pml-testing.csv\")\r\n}\r\n```\r\n\r\n\r\n```r\r\n#Load Data train\r\ntraining <- read.csv(\"pml-training.csv\", stringsAsFactors=FALSE)\r\n```\r\n\r\n## Getting and Cleaning the Data Set\r\n\r\nThere are 160 columns in the Training Set, and we will be excluding columns with NA values.\r\n\r\nCleaning data:\r\n\r\n\r\n```r\r\nNewTraining <- training\r\nNewTraining[ NewTraining == '' | NewTraining == 'NA'] <- NA\r\nindx <- which(colSums(is.na(NewTraining))!=0)\r\nNewTraining <- NewTraining[, -indx]\r\nNewTraining <- NewTraining[,-(1:7)]\r\n```\r\n\r\n## Creating train y test data\r\n\r\n\r\n```r\r\nInTraining  <- createDataPartition(y=NewTraining$classe,p=0.70,list=FALSE)\r\ndata <- NewTraining\r\nNewTraining <- data[InTraining,]\r\nValidateSet <- data[-InTraining,]\r\n```\r\n\r\n## Model Training\r\n\r\nRandom Forest we will be using to train our Prediction Model set to predict the weight lifting quality in the Training Set.\r\n\r\n\r\n```r\r\nlibrary(randomForest)\r\n```\r\n\r\n```\r\n## randomForest 4.6-10\r\n## Type rfNews() to see new features/changes/bug fixes.\r\n## \r\n## Attaching package: 'randomForest'\r\n## \r\n## The following object is masked from 'package:Hmisc':\r\n## \r\n##     combine\r\n```\r\n\r\n```r\r\n# model fit using random forests\r\nPmodel <- randomForest(as.factor(classe)~.,data=NewTraining)\r\nPmodel\r\n```\r\n\r\n```\r\n## \r\n## Call:\r\n##  randomForest(formula = as.factor(classe) ~ ., data = NewTraining) \r\n##                Type of random forest: classification\r\n##                      Number of trees: 500\r\n## No. of variables tried at each split: 7\r\n## \r\n##         OOB estimate of  error rate: 0.47%\r\n## Confusion matrix:\r\n##      A    B    C    D    E class.error\r\n## A 3906    0    0    0    0    0.000000\r\n## B   10 2642    6    0    0    0.006020\r\n## C    0   10 2385    1    0    0.004591\r\n## D    0    0   25 2224    3    0.012433\r\n## E    0    0    2    7 2516    0.003564\r\n```\r\n\r\n## Model Evaluation\r\n\r\nNow we evaluate our model results through confusion Matrix.\r\n\r\n\r\n```r\r\n#Predictions\r\npredict <- predict(Pmodel, ValidateSet)\r\n# evaluate the model\r\nerror <- confusionMatrix(ValidateSet$classe, predict);\r\n```\r\n\r\n```\r\n## \r\n## Attaching package: 'e1071'\r\n## \r\n## The following object is masked from 'package:Hmisc':\r\n## \r\n##     impute\r\n```\r\n\r\n```r\r\nerror\r\n```\r\n\r\n```\r\n## Confusion Matrix and Statistics\r\n## \r\n##           Reference\r\n## Prediction    A    B    C    D    E\r\n##          A 1671    2    0    0    1\r\n##          B    5 1132    2    0    0\r\n##          C    0    3 1021    2    0\r\n##          D    0    0   12  952    0\r\n##          E    0    0    1    2 1079\r\n## \r\n## Overall Statistics\r\n##                                         \r\n##                Accuracy : 0.995         \r\n##                  95% CI : (0.993, 0.997)\r\n##     No Information Rate : 0.285         \r\n##     P-Value [Acc > NIR] : <2e-16        \r\n##                                         \r\n##                   Kappa : 0.994         \r\n##  Mcnemar's Test P-Value : NA            \r\n## \r\n## Statistics by Class:\r\n## \r\n##                      Class: A Class: B Class: C Class: D Class: E\r\n## Sensitivity             0.997    0.996    0.986    0.996    0.999\r\n## Specificity             0.999    0.999    0.999    0.998    0.999\r\n## Pos Pred Value          0.998    0.994    0.995    0.988    0.997\r\n## Neg Pred Value          0.999    0.999    0.997    0.999    1.000\r\n## Prevalence              0.285    0.193    0.176    0.162    0.184\r\n## Detection Rate          0.284    0.192    0.173    0.162    0.183\r\n## Detection Prevalence    0.284    0.194    0.174    0.164    0.184\r\n## Balanced Accuracy       0.998    0.997    0.992    0.997    0.999\r\n```\r\n\r\nModel Accuracy as tested over Validation set = 99.9%\r\n\r\n## Model Test\r\n\r\nFinally, we proceed with predicting the new values in the testing csv provided\r\n\r\n\r\n```r\r\n#Load Data test\r\ntraining <- read.csv(\"pml-testing.csv\", stringsAsFactors=FALSE)\r\n#Predicting\r\nprediccion <- predict(Pmodel, ValidateSet)\r\n```\r\n\r\n### Generating Answers Files to Submit for Assignment\r\n\r\nThe following function to create the files to answers the Prediction Assignment Submission:\r\n\r\n\r\n```r\r\nwrite_files = function(x){\r\n  for(i in 1:30){\r\n    filename = paste0(\"problem_id_\",i,\".txt\")\r\n    write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)\r\n  }\r\n}\r\n\r\nwrite_files(prediccion)\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}